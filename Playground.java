import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.ThreadLocalRandom;

// Java program to calculate SHA hash value 

class GFG {
	public static byte[] getSHA(String input) throws NoSuchAlgorithmException {
		// Static getInstance method is called with hashing SHA
		MessageDigest md = MessageDigest.getInstance("SHA-256");

		// digest() method called
		// to calculate message digest of an input
		// and return array of byte
		return md.digest(input.getBytes(StandardCharsets.UTF_8));
	}

	public static String toHexString(byte[] hash) {
		// Convert byte array into signum representation
		BigInteger number = new BigInteger(1, hash);

		// Convert message digest into hex value
		StringBuilder hexString = new StringBuilder(number.toString(16));

		// Pad with leading zeros
		while (hexString.length() < 32) {
			hexString.insert(0, '0');
		}

		return hexString.toString();
	}

	// Driver code
	public static void main(String args[]) {
		// try
		// {
		// System.out.println("HashCode Generated by SHA-256 for:");

		// String s1 = String.valueOf(123);
		// System.out.println("\n" + s1 + " : " + toHexString(getSHA(s1)));

		// System.out.println(String.format("%05d", 123));

		// String s2 = "hello world";
		// System.out.println("\n" + s2 + " : " + toHexString(getSHA(s2)));
		// }
		// // For specifying wrong message digest algorithms
		// catch (NoSuchAlgorithmException e) {
		// System.out.println("Exception thrown for incorrect algorithm: " + e);
		// }

	}

	void populateDummyData() {
		FileWriter fw;
		try {
			fw = new FileWriter("Data.csv", true);
			BufferedWriter bw = new BufferedWriter(fw);
			PrintWriter pw = new PrintWriter(bw);
			for (int i = 0; i < 20; i++) {
				String PIN = String.format("%05d", ThreadLocalRandom.current().nextInt(0, 10000));
				String accountNumber = String.valueOf(ThreadLocalRandom.current().nextLong(100000000, 1000000000));
				String phoneNumber = String.valueOf(ThreadLocalRandom.current().nextLong(100000000, 1000000000))
						+ ThreadLocalRandom.current().nextInt(9);
				double balance = ThreadLocalRandom.current().nextDouble(1000, 10000000);
				System.out.println(PIN);
				System.out.println(accountNumber);
				System.out.println(phoneNumber);
				System.out.println(balance);
				pw.println(PIN + "," + accountNumber + "," + phoneNumber + "," + balance);
				pw.flush();
			}
			pw.close();
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	}
}
